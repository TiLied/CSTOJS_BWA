@page "/"
@using Microsoft.AspNetCore.Components.Forms;
@using CSharpToJavaScript;
@using System.Text;
@using Microsoft.CodeAnalysis;
@using System.Reflection;
@using System.IO
@using System.Diagnostics
@using System.Text.RegularExpressions
@inject NavigationManager navigationManager

<h1>CSharpToJavaScript Online!</h1>
<h3>Note: Due to blazor webassembly not all references loaded, may result in different outcome compare to the Nuget package.</h3>

<a href="https://tilied.github.io/CSTOJS_Pages/"><button type="button">Back to documentation</button></a>
<EditForm Model="@_EditContext" OnValidSubmit="@Submit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="CSInput">
		<label>
			CSharp input:
			<InputTextArea spellcheck="false" @bind-Value="@Model.CSString" />
		</label>
	</div>
	<div class="CSTOJSOptions">
		<button type="submit">Convert to JS</button>
		<label>Debug: <InputCheckbox @bind-Value="@Model.Debug"></InputCheckbox> </label>
		<label>Disable Console Output: <InputCheckbox @bind-Value="@Model.DisableConsoleOutput"></InputCheckbox> </label>
		<label>Use Var Over Let: <InputCheckbox @bind-Value="@Model.UseVarOverLet"></InputCheckbox> </label>
		<label>Keep Brace On The Same Line: <InputCheckbox @bind-Value="@Model.KeepBraceOnTheSameLine"></InputCheckbox> </label>
		<label>Normalize Whitespace: <InputCheckbox @bind-Value="@Model.NormalizeWhitespace"></InputCheckbox> </label>
		<label>Use Strict Equality: <InputCheckbox @bind-Value="@Model.UseStrictEquality"></InputCheckbox> </label>
		<label>Custom CS names to JS: <InputText title="Example:Console-console,WriteLine-log"  @bind-Value="@Model.CustomCSNamesToJS"></InputText> </label>
		<label>Add string at the top: <InputText @bind-Value="@Model.AddSBAtTheTop"></InputText> </label>
		<label>Add string at the bottom: <InputText @bind-Value="@Model.AddSBAtTheBottom" ></InputText> </label>
	</div>
	<div class="JSOutput">
		<label>
			JavaScript output:
			<InputTextArea @bind-Value="@Model.JSString" readonly />
		</label>
	</div>
</EditForm>

@code {
	private EditContext? _EditContext;
	private CSTOJS _CSTOJS = new();
	private List<MetadataReference> _References = new();

	public CSTOJSModel Model = new();

	protected override void OnInitialized()
	{
		Model.CSString = @"namespace CSTOJS_BWA.CSharp;
public class Test
{
	public Test()
	{
		string w = ""world"";
		Console.WriteLine($""Hello {w}."");
	}
}
";
		_EditContext = new(Model);
	}

	protected override async Task OnInitializedAsync()
	{
		Assembly? assembly = Assembly.GetEntryAssembly();

		AssemblyName[]? refs = assembly?.GetReferencedAssemblies();

		HttpClient client = new()
		{
			BaseAddress = new Uri(navigationManager.BaseUri)
		};


		//
		//
		//well...
		string html = await client.GetStringAsync($"_framework/dotnet.js");

		if (refs != null)
		{
			string reg = @"name"": ""(System.Private.CoreLib.(\w)+.dll)""";

			string url = Regex.Matches(html, reg)[0].Groups[1].Value;

			byte[] stream = await client.GetByteArrayAsync($"_framework/{url}");
			_References.Add(MetadataReference.CreateFromImage(stream));

			foreach (AssemblyName reference in refs)
			{
				reg = @$"name"": ""({reference.Name}.(\w)+.dll)""";
				url = Regex.Matches(html, reg)[0].Groups[1].Value;

				stream = await client.GetByteArrayAsync($"_framework/{url}");
				_References.Add(MetadataReference.CreateFromImage(stream));

				Console.WriteLine(reference.Name);
			}
		}
		//Debug.Assert(refs == null, "refs is null");


		Console.WriteLine("--- --- ---");
		Console.WriteLine("   -   -   ");
		Console.WriteLine("--- --- ---");
	}

	private void Submit()
	{
		Model.CustomCSNamesToJS = Model.CustomCSNamesToJS.Replace(" ", "").Trim();

		StringBuilder stringBuilderTop = new();
		if (Model.AddSBAtTheTop != string.Empty)
		{
			stringBuilderTop.AppendLine(Model.AddSBAtTheTop);
		}
		StringBuilder stringBuilderBottom = new();
		if (Model.AddSBAtTheBottom != string.Empty)
		{
			stringBuilderBottom.AppendLine(Model.AddSBAtTheBottom);
		}

		Dictionary<string, string> _cstojsList = new();

		if (Model.CustomCSNamesToJS != string.Empty)
		{
			List<string> _localTuples = new();
			if (Model.CustomCSNamesToJS.Contains(","))
			{
				_localTuples = Model.CustomCSNamesToJS.Split(",").ToList();

				for (int i = 0; i < _localTuples.Count; i++)
				{
					string[] _local = _localTuples[i].Split("-");
					_cstojsList.Add(_local[0], _local[1]);
				}
			}
			else 
			{
				if (Model.CustomCSNamesToJS.Contains("-")) 
				{
					string[] _local = Model.CustomCSNamesToJS.Split("-");
					_cstojsList.Add(_local[0], _local[1]);
				}
			}
		}

		CSTOJSOptions options = new()
			{ 
				Debug = Model.Debug,
				DisableConsoleOutput = Model.DisableConsoleOutput,
				UseVarOverLet = Model.UseVarOverLet,
				KeepBraceOnTheSameLine = Model.KeepBraceOnTheSameLine,
				NormalizeWhitespace = Model.NormalizeWhitespace,
				UseStrictEquality = Model.UseStrictEquality,

				CustomCSNamesToJS = _cstojsList,

				AddSBAtTheTop = stringBuilderTop,
				AddSBAtTheBottom = stringBuilderBottom
			};
		StringBuilder sb = _CSTOJS.GenerateOneFromString(Model.CSString, options, _References);
		Model.JSString = sb.ToString();
	}
}
